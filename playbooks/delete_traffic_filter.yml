---
- name: Delete Traffic Filter profiles and protections
  hosts: cc
  gather_facts: false
  vars_files:
    - ../vars/cc.yml
    - ../vars/delete_vars.yml   # contains dp_ip (list of device IPs) and delete_traffic_filters (profiles & protections)

  tasks:

    - name: Delete traffic filter block
      block:
        # Lock devices
        - name: Lock device(s)
          dp_lock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          when: not (skip_device_lock | default(false))

        # Delete Traffic Filter profiles & protections
        - name: Delete traffic filter profiles/protections
          delete_traffic_filter:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
            traffic_filters: "{{ delete_traffic_filters }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          register: tf_delete_results
          ignore_errors: true

        # Display deletion results in user-friendly format
        - name: Display Traffic Filter deletion results
          vars:
            formatted_output: |
              {% for result in tf_delete_results.results %}
              Device: {{ result.item }}

              {% set profiles = result.response.deleted_profiles | default([]) %}
              {% set protections = result.response.deleted_protections | default([]) %}
              {% set errors = result.failed_items | default([]) %}

              {% if profiles | length > 0 %}
              Deleted Profiles:
              {% for prof in profiles %}
                {% if prof.get('error') %}
                - {{ prof.profile_name }} | Error: {{ prof.error }}
                {% else %}
                - {{ prof.profile_name }} was deleted successfully | Status: {{ prof.response.status | default('deleted') }}
                {% endif %}
              {% endfor %}
              {% else %}
              No profiles were deleted.
              {% endif %}

              {% if protections | length > 0 %}
              Deleted Protections:
              {% for prot in protections %}
                {% if prot.get('error') %}
                - {{ prot.protection_name }} (Profile: {{ prot.profile_name }}) | Error: {{ prot.error }}
                {% else %}
                - {{ prot.protection_name }} (Profile: {{ prot.profile_name }}) was deleted successfully
                  | Status: {{ prot.response.status | default('deleted') }}
                {% endif %}
              {% endfor %}
              {% else %}
              No protections were deleted.
              {% endif %}

              {% if errors | length > 0 %}
              Errors:
              {% for err in errors %}
              - {{ err }}
              {% endfor %}
              {% else %}
              No errors.
              {% endif %}

              {% endfor %}
          ansible.builtin.debug:
            msg: "{{ formatted_output.split('\n') }}"

        # Apply policy updates if needed
        - name: Apply policy updates per device
          update_policies:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Applying policies: {{ item }}"
          when:
            - not (skip_policy_updates | default(false))
            - tf_delete_results is defined
            - tf_delete_results.changed | default(false)

      always:
        # Unlock devices
        - name: Unlock device(s)
          dp_unlock:
            provider: "{{ cc }}"
            dp_ip: "{{ item }}"
          loop: "{{ dp_ip }}"
          loop_control:
            label: "Device: {{ item }}"
          when: not (skip_device_lock | default(false))
