# Expects:
#   cc.*, device_ip, policy (full dict from policies.yml)

- name: Lock device once for this policy batch
  dp_lock:
    provider:
      server: "{{ cc.server }}"
      username: "{{ cc.username }}"
      password: "{{ cc.password }}"
      verify_ssl: "{{ cc.verify_ssl | default(false) }}"
    device_ip: "{{ device_ip }}"

- block:
    - name: "Network classes for policy {{ policy.name }}"
      when: policy.network_class.enabled | default(false)
      block:
        - name: Source network class
          when: not policy.network_class.source.reuse_existing | default(false)
          include_role:
            name: network_class
          vars:
            netclass:
              name: "{{ policy.network_class.source.name }}"
              groups: "{{ policy.network_class.source.groups }}"

        - name: Destination network class
          when: not policy.network_class.destination.reuse_existing | default(false)
          include_role:
            name: network_class
          vars:
            netclass:
              name: "{{ policy.network_class.destination.name }}"
              groups: "{{ policy.network_class.destination.groups }}"

    - name: "BDOS profile for policy {{ policy.name }}"
      when: policy.bdos.enabled | default(false)
      include_role:
        name: bdos
      vars:
        bdos: "{{ policy.bdos }}"

  always:
    - name: Unlock device (always)
      dp_unlock:
        provider:
          server: "{{ cc.server }}"
          username: "{{ cc.username }}"
          password: "{{ cc.password }}"
          verify_ssl: "{{ cc.verify_ssl | default(false) }}"
        device_ip: "{{ device_ip }}"
